系统启动 第一个 app 流程。
AMS.systemReady() -> startHomeActivityLocked() ---------------------> ActivityStackSupervisor.startHomeActivity() -> startActivityLocked -> startActivityUncheckedLocked -> ActivityStack.startActivityLocked() -> ActivityStackSupervisor.resumeTopActivitiesLocked() -> ActivityStack.resumeTopActivityLocked() -> resumeTopActivityInnerLocked() -> startPausingLocked() -> ApplicationThreadProxy.scheduledPauseActivity     -> ActivityThread.scheduledPauseActivity()      -> handlePauseActivity() -> ActivityManagerNative.activityPause() -> ActivityManagerService.activityPaused() -> ActivityStack.activityPausedLocked() -> completePauseLocked()  -------------------------------------------> ActivityStackSupervisor.resumeTopActivitiesLocked() -> ActivityStack.resumeTopActivityLocked() -> ActivityStackSupervisor.startSpecificActivityLocked()  -----------------------------------> ActivityManagerService.startProcessLocked() -> Process.start() -> startViaZygote() -> zygoteSendArgsAndGetResult() --------------------------------------------------->  ActivityThread.main()
                     getHomeIntent(){CATEGORY_HOME}                   {主要是 task 相关的工作}                                                                                                                                                                                                                                                            {当前 activity pause}   {通过 Binder，最终调用到 ActivityThread}                {来自 ApplicationThread 这个 binder类的调用}       {来自 handler }           {通过 binder 最终调用 AMS}                                                            {最终又回到了 activity stack}            {至此，pause 前一个 activity 的流程完毕，开始 resume 下一个 activity}                                                                                                       {realStartActivityLocked() 如果 process 存在，那么直接进入 activity 创建流程}                  {准备 fork 进程了}                                                 {包含了启动的class}   {最后通过 socket 通信，使得 zygote fork 一个新的进程，该进程会执行 ActivityThread.main()}                                

Process 启动后，Application 创建流程 
ActivityThread.main() -> attach() ------------------> ActivityManagerNative.attachApplication() -> ActivityManagerService.attachApplication() -> attachApplicationLocked() -> ActivityThread.bindApplication() -> handleBindApplication()  ------------------------------> Instrumentation.callApplicationOnCreate() -> 至此 Application.onCreate 被调用。注意 Activity 创建是在之前的一个分支中进行，在这一部分子后。
                         {和 systemMain 的区别在此}                                                  {来自 binder}                                                               {一些初始化操作}                      {getPackageInof() 获得 pkg 信息                                                                           
                                                                                                                                                                                                                   ContextImpl.createAppContext() 创建 context
                                                                                                                                                                                                                   instrumentation.newInstantce() 创建 Instrumentation
                                                                                                                                                                                                                   installContentProvider}              

Activity 启动的分支                                                                                                                                                                                                                  
ActivityStack.realStartActivityLocked()  -> ActivityThread.scheduleLaunchActivity()  -> handleLaunchActivity() ----------------> performLaunchActivity() -> Instrumentation.newActivity()   ----------> ActivityThread.performLaunchActivity()  ---------------> Activity.attach()  -> Instrumentation.callActivityonCreate() -> 至此，Activty 创建流程结束                                                                                                                                                                                                                              
                                                                                        {来自 handler                                                        {此时创建的 activity 不具有 context}          {创建 Application, 创建 baseContextForActivity}
                                                                                         WindowManagerGlobal.initialize()}            
